<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Compte>
 */
class CompteFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'numero' => null, // Will be auto-generated by the model
            'type' => $this->faker->randomElement(['courant', 'epargne', 'entreprise']),
            'solde' => $this->faker->randomFloat(2, 0, 10000),
            'devise' => $this->faker->randomElement(['EUR', 'USD', 'GBP', 'CAD']),
            'is_active' => $this->faker->boolean(95), // 95% chance of being active
            'client_id' => \App\Models\Client::factory(),
            'date_ouverture' => $this->faker->dateTimeBetween('-2 years', 'now'),
            'last_transaction_at' => $this->faker->optional(0.8)->dateTimeBetween('-1 year', 'now'),
        ];
    }

    /**
     * Indicate that the compte is active.
     */
    public function active(): static
    {
        return $this->state(fn (array $attributes) => [
            'is_active' => true,
        ]);
    }

    /**
     * Indicate that the compte is inactive.
     */
    public function inactive(): static
    {
        return $this->state(fn (array $attributes) => [
            'is_active' => false,
        ]);
    }

    /**
     * Indicate that the compte is of type courant.
     */
    public function courant(): static
    {
        return $this->state(fn (array $attributes) => [
            'type' => 'courant',
        ]);
    }

    /**
     * Indicate that the compte is of type epargne.
     */
    public function epargne(): static
    {
        return $this->state(fn (array $attributes) => [
            'type' => 'epargne',
        ]);
    }

    /**
     * Indicate that the compte has a high balance.
     */
    public function highBalance(): static
    {
        return $this->state(fn (array $attributes) => [
            'solde' => $this->faker->randomFloat(2, 5000, 50000),
        ]);
    }

    /**
     * Indicate that the compte has recent transactions.
     */
    public function withRecentTransaction(): static
    {
        return $this->state(fn (array $attributes) => [
            'last_transaction_at' => $this->faker->dateTimeBetween('-30 days', 'now'),
        ]);
    }

    /**
     * Create a compte for an existing client.
     */
    public function forClient(\App\Models\Client $client): static
    {
        return $this->state(fn (array $attributes) => [
            'client_id' => $client->id,
        ]);
    }
}
