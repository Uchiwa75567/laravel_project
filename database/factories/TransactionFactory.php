<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Transaction>
 */
class TransactionFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        $type = $this->faker->randomElement(['depot', 'retrait', 'virement_emis', 'virement_recue', 'paiement']);
        $montant = $this->faker->randomFloat(2, 10, 5000);

        // Pour les virements, on peut avoir un compte destination
        $compteDestinationId = null;
        if (in_array($type, ['virement_emis', 'virement_recue'])) {
            $compteDestinationId = \App\Models\Compte::factory();
        }

        return [
            'reference' => null, // Will be auto-generated by the model
            'type' => $type,
            'montant' => $montant,
            'devise' => $this->faker->randomElement(['EUR', 'USD', 'GBP', 'CAD']),
            'description' => $this->faker->sentence(),
            'statut' => $this->faker->randomElement(['effectuee', 'annulee', 'en_cours']),
            'compte_id' => \App\Models\Compte::factory(),
            'compte_destination_id' => $compteDestinationId,
            'date_transaction' => $this->faker->dateTimeBetween('-1 year', 'now'),
            'metadata' => $this->faker->optional(0.3)->passthrough([
                'channel' => $this->faker->randomElement(['web', 'mobile', 'api', 'guichet']),
                'fees' => $this->faker->randomFloat(2, 0, 50),
                'location' => $this->faker->city(),
            ]),
        ];
    }

    /**
     * Indicate that the transaction is a deposit.
     */
    public function depot(): static
    {
        return $this->state(fn (array $attributes) => [
            'type' => 'depot',
            'compte_destination_id' => null,
        ]);
    }

    /**
     * Indicate that the transaction is a withdrawal.
     */
    public function retrait(): static
    {
        return $this->state(fn (array $attributes) => [
            'type' => 'retrait',
            'compte_destination_id' => null,
        ]);
    }

    /**
     * Indicate that the transaction is a transfer sent.
     */
    public function virementEmis(): static
    {
        return $this->state(fn (array $attributes) => [
            'type' => 'virement_emis',
            'compte_destination_id' => \App\Models\Compte::factory(),
        ]);
    }

    /**
     * Indicate that the transaction is a transfer received.
     */
    public function virementRecue(): static
    {
        return $this->state(fn (array $attributes) => [
            'type' => 'virement_recue',
            'compte_destination_id' => null,
        ]);
    }

    /**
     * Indicate that the transaction is a payment.
     */
    public function paiement(): static
    {
        return $this->state(fn (array $attributes) => [
            'type' => 'paiement',
            'compte_destination_id' => null,
        ]);
    }

    /**
     * Indicate that the transaction is completed.
     */
    public function completed(): static
    {
        return $this->state(fn (array $attributes) => [
            'statut' => 'effectuee',
        ]);
    }

    /**
     * Indicate that the transaction is cancelled.
     */
    public function cancelled(): static
    {
        return $this->state(fn (array $attributes) => [
            'statut' => 'annulee',
        ]);
    }

    /**
     * Indicate that the transaction is pending.
     */
    public function pending(): static
    {
        return $this->state(fn (array $attributes) => [
            'statut' => 'en_cours',
        ]);
    }

    /**
     * Indicate that the transaction has a high amount.
     */
    public function highAmount(): static
    {
        return $this->state(fn (array $attributes) => [
            'montant' => $this->faker->randomFloat(2, 1000, 10000),
        ]);
    }

    /**
     * Indicate that the transaction is recent.
     */
    public function recent(): static
    {
        return $this->state(fn (array $attributes) => [
            'date_transaction' => $this->faker->dateTimeBetween('-30 days', 'now'),
        ]);
    }

    /**
     * Create a transaction for an existing compte.
     */
    public function forCompte(\App\Models\Compte $compte): static
    {
        return $this->state(fn (array $attributes) => [
            'compte_id' => $compte->id,
            'devise' => $compte->devise,
        ]);
    }

    /**
     * Create a transaction between two existing comptes.
     */
    public function betweenComptes(\App\Models\Compte $source, \App\Models\Compte $destination): static
    {
        return $this->state(fn (array $attributes) => [
            'compte_id' => $source->id,
            'compte_destination_id' => $destination->id,
            'type' => 'virement_emis',
            'devise' => $source->devise,
        ]);
    }
}
